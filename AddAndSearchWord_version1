class WordDictionary {
public:

    struct TrieNode {
        bool isString = false;
        unordered_map<char, TrieNode *> leaves;
    };
    
    WordDictionary() {
        root = new TrieNode();
        root->isString = true;
    }

    // Adds a word into the data structure.
    void addWord(string word) {
        // Write your code here
        TrieNode *cur = root;
        for(int i = 0; i < word.size(); ++i){
            if(cur->leaves.find(word[i]) == cur->leaves.end()){
                cur->leaves[word[i]] = new TrieNode();
            }
            cur = cur->leaves[word[i]];
        }
        cur->isString = true;
    }

    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    bool search(string word) {
        // Write your code here
        TrieNode *cur = root;
        return searchWord(word, cur, 0);
        
    }
    
    bool searchWord(string &word, TrieNode *node, int s) {
        if(s == word.size()){
            return node->isString;
        }
        
        if(node->leaves.find(word[s]) != node->leaves.end()) {
            return searchWord(word, node->leaves[word[s]], s+1);
        }
        else if (word[s] == '.') {
            for(unordered_map<char, TrieNode*>::iterator itr = node->leaves.begin(); itr != node->leaves.end(); ++ itr){
                if(searchWord(word, itr->second, s+1)){
                    return true;
                }
            }   
        }
        
        return false;
    }
    
private:
    TrieNode * root;
};

// Your WordDictionary object will be instantiated and called as such:
// WordDictionary wordDictionary;
// wordDictionary.addWord("word");
// wordDictionary.search("pattern");
