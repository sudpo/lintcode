class Solution {
    void permuteHelper(vector<int> &nums, vector<vector<int> > &result, vector<int> solution, vector<int> &visited ) {
        if(solution.size() == nums.size()) {
            result.push_back(solution);
            return;
        }
        for(int i = 0; i < nums.size(); i++) {
            if( (i != 0 && nums[i] == nums[i-1] && visited[i-1] == 0) || visited[i] == 1) {
                continue;
            }
            solution.push_back(nums[i]);
            visited[i] = 1;
            permuteHelper(nums, result, solution, visited);
            solution.pop_back();
            visited[i] = 0;
        }
    }
    
    
public:
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    vector<vector<int> > permuteUnique(vector<int> &nums) {
        // write your code here
        vector<vector<int> > result;
        vector<int> visited(nums.size(), 0);
        if(nums.size() == 0) {
            return result;
        }
        sort(nums.begin(), nums.end());
        vector<int> solution;
        permuteHelper(nums, result, solution, visited);
        return result;
    }
};
