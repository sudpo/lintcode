class Solution {
public:
    /**
     * @param matrix: a matrix of 0 and 1
     * @return: an integer
     */
    int maxSquare(vector<vector<int> > &matrix) {
        // write your code here
        int maxResult = 0;
        int n = matrix.size();
        if(n == 0) {
            return 0;
        }
        int m = matrix[0].size();
        if(m == 0) {
            return 0;
        }
        
        vector<vector <int> > dpHelper(n, vector<int> (m, 0));
        if(matrix[0][0] == 1) {
            dpHelper[0][0] = 1;
            maxResult = 1;
        }
        for(int i = 1; i < n; ++i) {
            if(matrix[i][0] == 1) {
                dpHelper[i][0] = 1;
            }
        }
        for(int j = 1; j < m; ++j) {
            if(matrix[0][j] == 1) {
                dpHelper[0][j] = 1;
            }
        }
        for(int i = 1; i < n; ++i) {
            for(int j = 1; j < m; ++j) {
                if(matrix[i][j] == 1) {
                    dpHelper[i][j] = min( min(dpHelper[i-1][j], dpHelper[i][j-1]), dpHelper[i-1][j-1]) + 1;
                    maxResult = max(maxResult, dpHelper[i][j]);
                }
            }
        }
        return maxResult * maxResult;
    }
};
