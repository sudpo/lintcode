class Solution {
public:
    /**
     * @param board a 2D board containing 'X' and 'O'
     * @return void
     */
    void surroundedRegions(vector<vector<char>>& board) {
        // Write your code here
        int n = board.size();
        if(n <= 2) {
            return;
        }
        int m = board[0].size();
        if(m <= 2) {
            return;
        }
        queue<pair<int, int> > position;
        for(int i = 0; i < n; ++i){
            if(board[i][0] == 'O'){
                position.push(pair<int,int>(i,0));
            }
            if(board[i][m-1] == 'O'){
                position.push(pair<int,int>(i,m-1));
            }
        }
        for(int j = 1; j < m-1; ++j){
            if(board[0][j] == 'O'){
                position.push(pair<int,int>(0,j));
            }
            if(board[n-1][j] == 'O'){
                position.push(pair<int,int>(n-1,j));
            }
        }
        while(!position.empty()){
            pair<int, int> currPos = position.front();
            int left = currPos.first;
            int right = currPos.second;
            board[left][right] = 'Y';
            if(left != 0 && board[left-1][right] == 'O') {
            position.push(pair<int,int> (left-1,right));
            }
            if(left != n-1 && board[left+1][right] == 'O'){
                position.push(pair<int,int>(left+1, right));
            }
            if(right != 0 && board[left][right-1] == 'O'){
                position.push(pair<int,int>(left, right-1));
            }
            if(right != m-1 && board[left][right+1] == 'O'){
                position.push(pair<int,int>(left, right+1));
            }
            position.pop();
        }
        
        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < m; ++j){
                if(board[i][j] == 'Y') {
                    board[i][j] = 'O';
                    continue;
                }
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                    continue;
                }
            }
        }
        
    }
};
