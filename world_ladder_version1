class Solution {
public:
    /**
      * @param start, a string
      * @param end, a string
      * @param dict, a set of string
      * @return an integer
      */
    int ladderLength(string start, string end, unordered_set<string> &dict) {
        // write your code here
        if(start == end) {
            return 1;
        }
        int n = start.size();
        if(n < 1 || n != end.size()) {
            return 0;
        }
        queue<string> que;
        que.push(start);
        dict.erase(start);
        int lenght = 2;
        
        while(!que.empty()) {
            int size = que.size();
            for(int i = 0 ; i < size ; ++i) {
                string word = que.front();
                que.pop();
                for(int j = 0; j < n; ++j) {
                    char oldchar = word[j];
                    for(char ch = 'a'; ch <= 'z'; ++ch) {
                        if(ch == oldchar) {
                            continue;
                        }
                        word[j] = ch;
                        if(word == end) {
                            return lenght;
                        }
                        if(dict.find(word) != dict.end()) {
                            que.push(word);
                            dict.erase(word);
                        }
                    }
                    word[j] = oldchar;
                }
            }
            lenght++;
        }
        return 0;
    }
};
