class Solution {
public:
    /**
     * @param A: An integer array.
     * @param target: An integer.
     */
    int MinAdjustmentCost(vector<int> A, int target) {
        // write your code here
        int n = A.size();
        if(n == 0 || n == 1) {
            return 0;
        }
        const int maxTarget = 100;
        vector<vector<int> > dp(n+1, vector<int> (maxTarget + 1, INT_MAX) );
        
        // dp[i][j] means the minimum adjustment cost to change the first i element with target j                                       
        for(int j = 0; j <= maxTarget; ++j) {
            dp[1][j] = abs(A[0] - j);
        }
        for(int i = 2; i <= n; ++i) {
            for(int j = 0; j <= maxTarget; ++j) {
                for(int k = 0; k <= maxTarget; ++k){
                    if(abs(j-k) > target) {
                        continue;
                    }
                    int dif = abs(j-A[i-1]) + dp[i-1][k];
                    dp[i][j] = min(dp[i][j], dif);
                }
            }
        }
        int minVal = INT_MAX;
        for(int i = 0; i <= maxTarget; ++i) {
            minVal = min(dp[n][i], minVal);
        }
        return minVal;
        
    }
};
