class Solution {
public:
    /**
     * @param s: A string
     * @return: A list of lists of string
     */
    vector<vector<string>> partition(string s) {
        // write your code here
        vector<vector<string> > result;
        vector<string> solution;
        if(s.size() == 0) {
            return result;
        }
        
        partitionHelper(s, result, solution, 0);
        return result;
    }
    
    void partitionHelper(string s, vector<vector<string> > &result, vector<string> &solution, int pos) {
        if(pos == s.size()) {
            result.push_back(solution);
            return;
        }
        
        for(int i = pos + 1; i <= s.size(); ++i) {
            string prefix = s.substr(pos, i - pos);
            if(!isPalindrome(prefix)) {
                continue;
            }
            solution.push_back(prefix);
            partitionHelper(s, result, solution, i);
            solution.pop_back();
        }
    }
    
    
    
    bool isPalindrome(string s) {
        if(s.size() == 0) {
            return true;
        }
        int start = 0;
        int end = s.size() - 1;
        while(start < end){
            if(s[start] != s[end]) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
};
