class Solution {
public:
    /**
     * Get all distinct N-Queen solutions
     * @param n: The number of queens
     * @return: All distinct solutions
     * For example, A string '...Q' shows a queen on forth position
     */
    vector<vector<string> > solveNQueens(int n) {
        // write your code here
        vector<vector<string> > result;
        if( n <= 0 ) {
            return result;
        }
        vector<int> cols;
        search(n, cols, result);
        return result;
    }
    
    void search(int n, vector<int> &col, vector<vector<string> > &result) {
        if(col.size() == n) {
            result.push_back(draw(col));
            return;
        }
        for(int i = 0; i < n; i++) {
            if(!isValid(col, i)) {
                continue;
            }
            col.push_back(i);
            search(n, col, result);
            col.pop_back();
        }
        
    }
    
    bool isValid(vector<int> cols, int col) {
        int row = cols.size(); 
        for(int i = 0; i < row; ++i) {
            if(cols[i] == col ) {
                return false;
            }
            if(i - cols[i] == row - col) {
                return false;
            }
            if(i + cols[i] == row + col) {
                return false;
            }
        }
        return true;
    }
    vector<string> draw(vector<int> &cols) {
        vector<string> solution;
        for(int i = 0; i < cols.size(); ++i) {
            string temp(cols.size(), '.');
            temp[cols[i]] = 'Q';
            solution.push_back(temp);
        }
        return solution;
    }
};
