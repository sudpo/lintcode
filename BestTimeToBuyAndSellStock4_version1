我们其实可以求至少k次交易的最大利润。我们定义local[i][j]为在到达第i天时最多可进行j次交易并且最后一次交易在最后一天卖出的最大利润，此为局部最优。然后我们定义global[i][j]为在到达第i天时最多可进行j次交易的最大利润，此为全局最优。它们的递推式为：

local[i][j] = max(global[i - 1][j - 1] + max(diff, 0), local[i - 1][j] + diff)

global[i][j] = max(local[i][j], global[i - 1][j])，

其中局部最优值是比较前一天并少交易一次的全局最优加上大于0的差值，和前一天的局部最优加上差值后相比，两者之中取较大值，而全局最优比较局部最优和前一天的全局最优。

class Solution {
public:
    /**
     * @param k: An integer
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    int maxProfit(int k, vector<int> &prices) {
        // write your code here
        int n = prices.size();
        if(n <= 1) {
            return 0;
        }
        if(k >= n) {
            return easyMaxProfit(prices);
        }
        
        vector<int> lmax(n+1, 0);
        vector<int> gmax(n+1, 0);
        
        for(int i = 0; i < n-1; ++i) {
            int diff = prices[i+1] - prices[i];
            for(int j = k; j >= 1; --j) {
                lmax[j] = max(gmax[j-1] + max(diff, 0), lmax[j] + diff);
                gmax[j] = max(gmax[j], lmax[j]);
            }
        }
        return gmax[k];
        
    }
    
    int easyMaxProfit(vector<int> &prices){
        int max = 0;
        for(int i = 1; i < prices.size(); ++i) {
            if(prices[i] > prices[i-1]){
                max += prices[i] - prices[i-1];
            }
        }
        return max;
    }
};
