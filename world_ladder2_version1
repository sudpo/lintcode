class Solution {
public:
    /**
      * @param start, a string
      * @param end, a string
      * @param dict, a set of string
      * @return a list of lists of string
      */
    
    void findAllNeibor(map<string, vector<string> > &graphMap, unordered_set<string> &dict)
    {
        for(unordered_set<string>::iterator it = dict.begin(); it != dict.end(); ++it) {
            string word = *it;
            string oldWord = word;
            for(int i = 0; i < word.size(); ++i) {
                char oldchar = word[i];
                for(char c = 'a'; c <= 'z'; ++c ) {
                    if(c == oldchar) {
                        continue;
                    } 
            
                    word[i] = c;
                    if(dict.find(word) != dict.end()) {
                        graphMap[oldWord].push_back(word);
                    }
                }
                word[i] = oldchar;
            }
        }
    }
        
    
    void getDistanceBfs(string start, string end, unordered_set<string> &dict, map<string, int> &distance, map<string, vector<string> > &graphMap) {
        
        queue<string> que;
        que.push(start);
        dict.erase(start);
        distance[start] = 0;
        int lenght = 1;
        
        while(!que.empty()) {
            int size = que.size();
            for(int i = 0; i < size; ++i) {
                string word = que.front();
                que.pop();
                for(int j = 0; j < start.size(); ++j) {
                    char oldchar = word[j];
                    for(char c = 'a'; c <= 'z'; ++c) {
                        if(oldchar == c) {
                            continue;
                        }
                        word[j] = c;
                        if(dict.find(word) != dict.end()) {
                            distance[word] = lenght;
                            if(lenght < distance[end]) {
                                que.push(word);
                            }
                            dict.erase(word);
                        }
                    }
                    word[j] = oldchar;
                }
            }
            lenght++;
        }
    }
    
    void dfs(string start, string curr, map<string, int> &distance, vector<vector<string> > &result, vector<string> &solution , map<string, vector<string> > &graphMap) {
        solution.push_back(curr);
        if(curr == start) {
            reverse(solution.begin(), solution.end());
            result.push_back(solution);
            reverse(solution.begin(), solution.end());
        }
        else{
            for(int i = 0; i < graphMap[curr].size(); ++i) {
                string word = graphMap[curr][i];
                if(distance[word] != INT_MAX && distance[word] <= distance[curr] - 1) {
                    dfs(start, word, distance, result, solution, graphMap);
                }
            }
        }
        solution.pop_back();
        
    }
    vector<vector<string>> findLadders(string start, string end, unordered_set<string> &dict) {
        // write your code here
        dict.insert(start);
        dict.insert(end);
        vector<vector<string> > result;
        vector<string> solution;
        map<string, vector<string> > graphMap;
        map<string, int> distance;
        for(unordered_set<string>::iterator it = dict.begin(); it != dict.end(); ++it) {
            distance[*it] = INT_MAX;
        }
        findAllNeibor(graphMap, dict);
        getDistanceBfs(start, end, dict, distance, graphMap);
        dfs(start, end, distance, result, solution, graphMap);
        return result;
    }
};
